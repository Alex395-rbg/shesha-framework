/* Generated by restful-react */

import React from 'react';
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react';

import * as RestfulShesha from '../utils/fetchers';
export const SPEC_VERSION = 'v1';
export interface AjaxResponseBase {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
}

export interface DynamicDtoSettingConfigurationGuid {
  id?: string;
  /**
   * List of form fields. Is used for partial updates. Contains a list of entity properties that should be updated. Leave empty to update all available entity fields
   */
  _formFields?: string[];
  editorFormModule?: string;
  configuration?: string | null;
  dataType?: string;
  itemType?: string;
  isClientSpecific?: boolean | null;
  orderIndex?: number | null;
  editorFormName?: string;
  accessMode?: number | null;
  _className?: string;
}

export interface DynamicDtoSettingConfigurationGuidAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: DynamicDtoSettingConfigurationGuid;
}

export interface DynamicDtoSettingConfigurationGuidPagedResultDto {
  items?: DynamicDtoSettingConfigurationGuid[] | null;
  totalCount?: number;
}

export interface DynamicDtoSettingConfigurationGuidPagedResultDtoAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: DynamicDtoSettingConfigurationGuidPagedResultDto;
}

export interface ErrorInfo {
  code?: number;
  message?: string | null;
  details?: string | null;
  validationErrors?: ValidationErrorInfo[] | null;
}

export type JToken = JToken[];

export interface ProxyDynamicDtoSettingConfigurationGuid {
  id?: string;
  _jObject?: {
    [key: string]: JToken;
  } | null;
  editorFormModule?: string | null;
  configuration?: string | null;
  dataType?: string | null;
  itemType?: string | null;
  isClientSpecific?: boolean | null;
  orderIndex?: number | null;
  editorFormName?: string | null;
  accessMode?: number | null;
  _className?: string | null;
}

export interface SettingConfigurationGraphQLDataResult {
  contentType?: string | null;
  serializerSettings?: {} | null;
  statusCode?: number | null;
  value?: {} | null;
}

export interface SettingConfigurationGraphQLDataResultAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: SettingConfigurationGraphQLDataResult;
}

export interface SettingConfigurationPagedResultDtoGraphQLDataResult {
  contentType?: string | null;
  serializerSettings?: {} | null;
  statusCode?: number | null;
  value?: {} | null;
}

export interface SettingConfigurationPagedResultDtoGraphQLDataResultAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: SettingConfigurationPagedResultDtoGraphQLDataResult;
}

export interface ValidationErrorInfo {
  message?: string | null;
  members?: string[] | null;
}

export interface SettingConfigurationGetQueryParams {
  /**
   * List of properties to fetch in GraphQL-like syntax. Supports nested properties
   */
  properties?: string;
  id?: string;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type SettingConfigurationGetProps = Omit<
  GetProps<DynamicDtoSettingConfigurationGuidAjaxResponse, AjaxResponseBase, SettingConfigurationGetQueryParams, void>,
  'path'
>;

export const SettingConfigurationGet = (props: SettingConfigurationGetProps) => (
  <Get<DynamicDtoSettingConfigurationGuidAjaxResponse, AjaxResponseBase, SettingConfigurationGetQueryParams, void>
    path={`/api/dynamic/Shesha/SettingConfiguration/Get`}
    {...props}
  />
);

export type UseSettingConfigurationGetProps = Omit<
  UseGetProps<
    DynamicDtoSettingConfigurationGuidAjaxResponse,
    AjaxResponseBase,
    SettingConfigurationGetQueryParams,
    void
  >,
  'path'
>;

export const useSettingConfigurationGet = (props: UseSettingConfigurationGetProps) =>
  useGet<DynamicDtoSettingConfigurationGuidAjaxResponse, AjaxResponseBase, SettingConfigurationGetQueryParams, void>(
    `/api/dynamic/Shesha/SettingConfiguration/Get`,
    props
  );

export type settingConfigurationGetProps = Omit<
  RestfulShesha.GetProps<
    DynamicDtoSettingConfigurationGuidAjaxResponse,
    AjaxResponseBase,
    SettingConfigurationGetQueryParams,
    void
  >,
  'queryParams'
>;
export const settingConfigurationGet = (
  queryParams: SettingConfigurationGetQueryParams,
  props: settingConfigurationGetProps
) =>
  RestfulShesha.get<
    DynamicDtoSettingConfigurationGuidAjaxResponse,
    AjaxResponseBase,
    SettingConfigurationGetQueryParams,
    void
  >(`/api/dynamic/Shesha/SettingConfiguration/Get`, queryParams, props);

export interface SettingConfigurationUpdateGqlQueryParams {
  /**
   * List of properties to fetch in GraphQL-like syntax. Supports nested properties
   */
  properties?: string;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type SettingConfigurationUpdateGqlProps = Omit<
  MutateProps<
    SettingConfigurationGraphQLDataResultAjaxResponse,
    AjaxResponseBase,
    SettingConfigurationUpdateGqlQueryParams,
    DynamicDtoSettingConfigurationGuid,
    void
  >,
  'path' | 'verb'
>;

/**
 * Update entity data.
 * NOTE: don't use on prod, will be merged with the `Update`endpoint soon
 */
export const SettingConfigurationUpdateGql = (props: SettingConfigurationUpdateGqlProps) => (
  <Mutate<
    SettingConfigurationGraphQLDataResultAjaxResponse,
    AjaxResponseBase,
    SettingConfigurationUpdateGqlQueryParams,
    DynamicDtoSettingConfigurationGuid,
    void
  >
    verb="PUT"
    path={`/api/dynamic/Shesha/SettingConfiguration/UpdateGql`}
    {...props}
  />
);

export type UseSettingConfigurationUpdateGqlProps = Omit<
  UseMutateProps<
    SettingConfigurationGraphQLDataResultAjaxResponse,
    AjaxResponseBase,
    SettingConfigurationUpdateGqlQueryParams,
    DynamicDtoSettingConfigurationGuid,
    void
  >,
  'path' | 'verb'
>;

/**
 * Update entity data.
 * NOTE: don't use on prod, will be merged with the `Update`endpoint soon
 */
export const useSettingConfigurationUpdateGql = (props: UseSettingConfigurationUpdateGqlProps) =>
  useMutate<
    SettingConfigurationGraphQLDataResultAjaxResponse,
    AjaxResponseBase,
    SettingConfigurationUpdateGqlQueryParams,
    DynamicDtoSettingConfigurationGuid,
    void
  >('PUT', `/api/dynamic/Shesha/SettingConfiguration/UpdateGql`, props);

export type settingConfigurationUpdateGqlProps = Omit<
  RestfulShesha.MutateProps<
    SettingConfigurationGraphQLDataResultAjaxResponse,
    AjaxResponseBase,
    SettingConfigurationUpdateGqlQueryParams,
    DynamicDtoSettingConfigurationGuid,
    void
  >,
  'data'
>;
/**
 * Update entity data.
 * NOTE: don't use on prod, will be merged with the `Update`endpoint soon
 */
export const settingConfigurationUpdateGql = (
  data: DynamicDtoSettingConfigurationGuid,
  props: settingConfigurationUpdateGqlProps
) =>
  RestfulShesha.mutate<
    SettingConfigurationGraphQLDataResultAjaxResponse,
    AjaxResponseBase,
    SettingConfigurationUpdateGqlQueryParams,
    DynamicDtoSettingConfigurationGuid,
    void
  >('PUT', `/api/dynamic/Shesha/SettingConfiguration/UpdateGql`, data, props);

export interface SettingConfigurationUpdateQueryParams {
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type SettingConfigurationUpdateProps = Omit<
  MutateProps<
    DynamicDtoSettingConfigurationGuidAjaxResponse,
    AjaxResponseBase,
    SettingConfigurationUpdateQueryParams,
    DynamicDtoSettingConfigurationGuid,
    void
  >,
  'path' | 'verb'
>;

export const SettingConfigurationUpdate = (props: SettingConfigurationUpdateProps) => (
  <Mutate<
    DynamicDtoSettingConfigurationGuidAjaxResponse,
    AjaxResponseBase,
    SettingConfigurationUpdateQueryParams,
    DynamicDtoSettingConfigurationGuid,
    void
  >
    verb="PUT"
    path={`/api/dynamic/Shesha/SettingConfiguration/Update`}
    {...props}
  />
);

export type UseSettingConfigurationUpdateProps = Omit<
  UseMutateProps<
    DynamicDtoSettingConfigurationGuidAjaxResponse,
    AjaxResponseBase,
    SettingConfigurationUpdateQueryParams,
    DynamicDtoSettingConfigurationGuid,
    void
  >,
  'path' | 'verb'
>;

export const useSettingConfigurationUpdate = (props: UseSettingConfigurationUpdateProps) =>
  useMutate<
    DynamicDtoSettingConfigurationGuidAjaxResponse,
    AjaxResponseBase,
    SettingConfigurationUpdateQueryParams,
    DynamicDtoSettingConfigurationGuid,
    void
  >('PUT', `/api/dynamic/Shesha/SettingConfiguration/Update`, props);

export type settingConfigurationUpdateProps = Omit<
  RestfulShesha.MutateProps<
    DynamicDtoSettingConfigurationGuidAjaxResponse,
    AjaxResponseBase,
    SettingConfigurationUpdateQueryParams,
    DynamicDtoSettingConfigurationGuid,
    void
  >,
  'data'
>;
export const settingConfigurationUpdate = (
  data: DynamicDtoSettingConfigurationGuid,
  props: settingConfigurationUpdateProps
) =>
  RestfulShesha.mutate<
    DynamicDtoSettingConfigurationGuidAjaxResponse,
    AjaxResponseBase,
    SettingConfigurationUpdateQueryParams,
    DynamicDtoSettingConfigurationGuid,
    void
  >('PUT', `/api/dynamic/Shesha/SettingConfiguration/Update`, data, props);

export interface SettingConfigurationCreateGqlQueryParams {
  /**
   * List of properties to fetch in GraphQL-like syntax. Supports nested properties
   */
  properties?: string;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type SettingConfigurationCreateGqlProps = Omit<
  MutateProps<
    SettingConfigurationGraphQLDataResultAjaxResponse,
    AjaxResponseBase,
    SettingConfigurationCreateGqlQueryParams,
    DynamicDtoSettingConfigurationGuid,
    void
  >,
  'path' | 'verb'
>;

/**
 * Create entity.
 * NOTE: don't use on prod, will be merged with the `Update`endpoint soon
 */
export const SettingConfigurationCreateGql = (props: SettingConfigurationCreateGqlProps) => (
  <Mutate<
    SettingConfigurationGraphQLDataResultAjaxResponse,
    AjaxResponseBase,
    SettingConfigurationCreateGqlQueryParams,
    DynamicDtoSettingConfigurationGuid,
    void
  >
    verb="POST"
    path={`/api/dynamic/Shesha/SettingConfiguration/CreateGql`}
    {...props}
  />
);

export type UseSettingConfigurationCreateGqlProps = Omit<
  UseMutateProps<
    SettingConfigurationGraphQLDataResultAjaxResponse,
    AjaxResponseBase,
    SettingConfigurationCreateGqlQueryParams,
    DynamicDtoSettingConfigurationGuid,
    void
  >,
  'path' | 'verb'
>;

/**
 * Create entity.
 * NOTE: don't use on prod, will be merged with the `Update`endpoint soon
 */
export const useSettingConfigurationCreateGql = (props: UseSettingConfigurationCreateGqlProps) =>
  useMutate<
    SettingConfigurationGraphQLDataResultAjaxResponse,
    AjaxResponseBase,
    SettingConfigurationCreateGqlQueryParams,
    DynamicDtoSettingConfigurationGuid,
    void
  >('POST', `/api/dynamic/Shesha/SettingConfiguration/CreateGql`, props);

export type settingConfigurationCreateGqlProps = Omit<
  RestfulShesha.MutateProps<
    SettingConfigurationGraphQLDataResultAjaxResponse,
    AjaxResponseBase,
    SettingConfigurationCreateGqlQueryParams,
    DynamicDtoSettingConfigurationGuid,
    void
  >,
  'data'
>;
/**
 * Create entity.
 * NOTE: don't use on prod, will be merged with the `Update`endpoint soon
 */
export const settingConfigurationCreateGql = (
  data: DynamicDtoSettingConfigurationGuid,
  props: settingConfigurationCreateGqlProps
) =>
  RestfulShesha.mutate<
    SettingConfigurationGraphQLDataResultAjaxResponse,
    AjaxResponseBase,
    SettingConfigurationCreateGqlQueryParams,
    DynamicDtoSettingConfigurationGuid,
    void
  >('POST', `/api/dynamic/Shesha/SettingConfiguration/CreateGql`, data, props);

export interface SettingConfigurationCreateQueryParams {
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type SettingConfigurationCreateProps = Omit<
  MutateProps<
    DynamicDtoSettingConfigurationGuidAjaxResponse,
    AjaxResponseBase,
    SettingConfigurationCreateQueryParams,
    DynamicDtoSettingConfigurationGuid,
    void
  >,
  'path' | 'verb'
>;

export const SettingConfigurationCreate = (props: SettingConfigurationCreateProps) => (
  <Mutate<
    DynamicDtoSettingConfigurationGuidAjaxResponse,
    AjaxResponseBase,
    SettingConfigurationCreateQueryParams,
    DynamicDtoSettingConfigurationGuid,
    void
  >
    verb="POST"
    path={`/api/dynamic/Shesha/SettingConfiguration/Create`}
    {...props}
  />
);

export type UseSettingConfigurationCreateProps = Omit<
  UseMutateProps<
    DynamicDtoSettingConfigurationGuidAjaxResponse,
    AjaxResponseBase,
    SettingConfigurationCreateQueryParams,
    DynamicDtoSettingConfigurationGuid,
    void
  >,
  'path' | 'verb'
>;

export const useSettingConfigurationCreate = (props: UseSettingConfigurationCreateProps) =>
  useMutate<
    DynamicDtoSettingConfigurationGuidAjaxResponse,
    AjaxResponseBase,
    SettingConfigurationCreateQueryParams,
    DynamicDtoSettingConfigurationGuid,
    void
  >('POST', `/api/dynamic/Shesha/SettingConfiguration/Create`, props);

export type settingConfigurationCreateProps = Omit<
  RestfulShesha.MutateProps<
    DynamicDtoSettingConfigurationGuidAjaxResponse,
    AjaxResponseBase,
    SettingConfigurationCreateQueryParams,
    DynamicDtoSettingConfigurationGuid,
    void
  >,
  'data'
>;
export const settingConfigurationCreate = (
  data: DynamicDtoSettingConfigurationGuid,
  props: settingConfigurationCreateProps
) =>
  RestfulShesha.mutate<
    DynamicDtoSettingConfigurationGuidAjaxResponse,
    AjaxResponseBase,
    SettingConfigurationCreateQueryParams,
    DynamicDtoSettingConfigurationGuid,
    void
  >('POST', `/api/dynamic/Shesha/SettingConfiguration/Create`, data, props);

export interface SettingConfigurationGetAllQueryParams {
  /**
   * Filter string in JsonLogic format
   */
  filter?: string;
  /**
   * Quick search string. Is used to search entities by text
   */
  quickSearch?: string;
  /**
   * List of specifications to apply on top of query
   */
  specifications?: string[];
  sorting?: string;
  skipCount?: number;
  maxResultCount?: number;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type SettingConfigurationGetAllProps = Omit<
  GetProps<
    DynamicDtoSettingConfigurationGuidPagedResultDtoAjaxResponse,
    AjaxResponseBase,
    SettingConfigurationGetAllQueryParams,
    void
  >,
  'path'
>;

export const SettingConfigurationGetAll = (props: SettingConfigurationGetAllProps) => (
  <Get<
    DynamicDtoSettingConfigurationGuidPagedResultDtoAjaxResponse,
    AjaxResponseBase,
    SettingConfigurationGetAllQueryParams,
    void
  >
    path={`/api/dynamic/Shesha/SettingConfiguration/GetAll`}
    {...props}
  />
);

export type UseSettingConfigurationGetAllProps = Omit<
  UseGetProps<
    DynamicDtoSettingConfigurationGuidPagedResultDtoAjaxResponse,
    AjaxResponseBase,
    SettingConfigurationGetAllQueryParams,
    void
  >,
  'path'
>;

export const useSettingConfigurationGetAll = (props: UseSettingConfigurationGetAllProps) =>
  useGet<
    DynamicDtoSettingConfigurationGuidPagedResultDtoAjaxResponse,
    AjaxResponseBase,
    SettingConfigurationGetAllQueryParams,
    void
  >(`/api/dynamic/Shesha/SettingConfiguration/GetAll`, props);

export type settingConfigurationGetAllProps = Omit<
  RestfulShesha.GetProps<
    DynamicDtoSettingConfigurationGuidPagedResultDtoAjaxResponse,
    AjaxResponseBase,
    SettingConfigurationGetAllQueryParams,
    void
  >,
  'queryParams'
>;
export const settingConfigurationGetAll = (
  queryParams: SettingConfigurationGetAllQueryParams,
  props: settingConfigurationGetAllProps
) =>
  RestfulShesha.get<
    DynamicDtoSettingConfigurationGuidPagedResultDtoAjaxResponse,
    AjaxResponseBase,
    SettingConfigurationGetAllQueryParams,
    void
  >(`/api/dynamic/Shesha/SettingConfiguration/GetAll`, queryParams, props);

export interface SettingConfigurationDeleteQueryParams {
  id?: string;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type SettingConfigurationDeleteProps = Omit<
  MutateProps<void, unknown, SettingConfigurationDeleteQueryParams, void, void>,
  'path' | 'verb'
>;

export const SettingConfigurationDelete = (props: SettingConfigurationDeleteProps) => (
  <Mutate<void, unknown, SettingConfigurationDeleteQueryParams, void, void>
    verb="DELETE"
    path={`/api/dynamic/Shesha/SettingConfiguration/Delete`}
    {...props}
  />
);

export type UseSettingConfigurationDeleteProps = Omit<
  UseMutateProps<void, unknown, SettingConfigurationDeleteQueryParams, void, void>,
  'path' | 'verb'
>;

export const useSettingConfigurationDelete = (props: UseSettingConfigurationDeleteProps) =>
  useMutate<void, unknown, SettingConfigurationDeleteQueryParams, void, void>(
    'DELETE',
    `/api/dynamic/Shesha/SettingConfiguration/Delete`,
    { ...props }
  );

export type settingConfigurationDeleteProps = Omit<
  RestfulShesha.MutateProps<void, unknown, SettingConfigurationDeleteQueryParams, void, void>,
  'data'
>;
export const settingConfigurationDelete = (props: settingConfigurationDeleteProps) =>
  RestfulShesha.mutate<void, unknown, SettingConfigurationDeleteQueryParams, void, void>(
    'DELETE',
    `/api/dynamic/Shesha/SettingConfiguration/Delete`,
    undefined,
    props
  );

export interface SettingConfigurationQueryQueryParams {
  /**
   * List of properties to fetch in GraphQL-like syntax. Supports nested properties
   */
  properties?: string;
  id?: string;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type SettingConfigurationQueryProps = Omit<
  GetProps<
    SettingConfigurationGraphQLDataResultAjaxResponse,
    AjaxResponseBase,
    SettingConfigurationQueryQueryParams,
    void
  >,
  'path'
>;

/**
 * Query entity data.
 * NOTE: don't use on prod, will be merged with the `Get`endpoint soon
 */
export const SettingConfigurationQuery = (props: SettingConfigurationQueryProps) => (
  <Get<SettingConfigurationGraphQLDataResultAjaxResponse, AjaxResponseBase, SettingConfigurationQueryQueryParams, void>
    path={`/api/dynamic/Shesha/SettingConfiguration/Query`}
    {...props}
  />
);

export type UseSettingConfigurationQueryProps = Omit<
  UseGetProps<
    SettingConfigurationGraphQLDataResultAjaxResponse,
    AjaxResponseBase,
    SettingConfigurationQueryQueryParams,
    void
  >,
  'path'
>;

/**
 * Query entity data.
 * NOTE: don't use on prod, will be merged with the `Get`endpoint soon
 */
export const useSettingConfigurationQuery = (props: UseSettingConfigurationQueryProps) =>
  useGet<
    SettingConfigurationGraphQLDataResultAjaxResponse,
    AjaxResponseBase,
    SettingConfigurationQueryQueryParams,
    void
  >(`/api/dynamic/Shesha/SettingConfiguration/Query`, props);

export type settingConfigurationQueryProps = Omit<
  RestfulShesha.GetProps<
    SettingConfigurationGraphQLDataResultAjaxResponse,
    AjaxResponseBase,
    SettingConfigurationQueryQueryParams,
    void
  >,
  'queryParams'
>;
/**
 * Query entity data.
 * NOTE: don't use on prod, will be merged with the `Get`endpoint soon
 */
export const settingConfigurationQuery = (
  queryParams: SettingConfigurationQueryQueryParams,
  props: settingConfigurationQueryProps
) =>
  RestfulShesha.get<
    SettingConfigurationGraphQLDataResultAjaxResponse,
    AjaxResponseBase,
    SettingConfigurationQueryQueryParams,
    void
  >(`/api/dynamic/Shesha/SettingConfiguration/Query`, queryParams, props);

export interface SettingConfigurationQueryAllQueryParams {
  /**
   * List of properties to fetch in GraphQL-like syntax. Supports nested properties
   */
  properties?: string;
  /**
   * Filter string in JsonLogic format
   */
  filter?: string;
  /**
   * Quick search string. Is used to search entities by text
   */
  quickSearch?: string;
  /**
   * List of specifications to apply on top of query
   */
  specifications?: string[];
  sorting?: string;
  skipCount?: number;
  maxResultCount?: number;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type SettingConfigurationQueryAllProps = Omit<
  GetProps<
    SettingConfigurationPagedResultDtoGraphQLDataResultAjaxResponse,
    AjaxResponseBase,
    SettingConfigurationQueryAllQueryParams,
    void
  >,
  'path'
>;

/**
 * Query entities list
 * NOTE: don't use on prod, will be merged with the GetAll endpoint soon
 */
export const SettingConfigurationQueryAll = (props: SettingConfigurationQueryAllProps) => (
  <Get<
    SettingConfigurationPagedResultDtoGraphQLDataResultAjaxResponse,
    AjaxResponseBase,
    SettingConfigurationQueryAllQueryParams,
    void
  >
    path={`/api/dynamic/Shesha/SettingConfiguration/QueryAll`}
    {...props}
  />
);

export type UseSettingConfigurationQueryAllProps = Omit<
  UseGetProps<
    SettingConfigurationPagedResultDtoGraphQLDataResultAjaxResponse,
    AjaxResponseBase,
    SettingConfigurationQueryAllQueryParams,
    void
  >,
  'path'
>;

/**
 * Query entities list
 * NOTE: don't use on prod, will be merged with the GetAll endpoint soon
 */
export const useSettingConfigurationQueryAll = (props: UseSettingConfigurationQueryAllProps) =>
  useGet<
    SettingConfigurationPagedResultDtoGraphQLDataResultAjaxResponse,
    AjaxResponseBase,
    SettingConfigurationQueryAllQueryParams,
    void
  >(`/api/dynamic/Shesha/SettingConfiguration/QueryAll`, props);

export type settingConfigurationQueryAllProps = Omit<
  RestfulShesha.GetProps<
    SettingConfigurationPagedResultDtoGraphQLDataResultAjaxResponse,
    AjaxResponseBase,
    SettingConfigurationQueryAllQueryParams,
    void
  >,
  'queryParams'
>;
/**
 * Query entities list
 * NOTE: don't use on prod, will be merged with the GetAll endpoint soon
 */
export const settingConfigurationQueryAll = (
  queryParams: SettingConfigurationQueryAllQueryParams,
  props: settingConfigurationQueryAllProps
) =>
  RestfulShesha.get<
    SettingConfigurationPagedResultDtoGraphQLDataResultAjaxResponse,
    AjaxResponseBase,
    SettingConfigurationQueryAllQueryParams,
    void
  >(`/api/dynamic/Shesha/SettingConfiguration/QueryAll`, queryParams, props);
