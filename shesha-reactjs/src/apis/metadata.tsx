/* Generated by restful-react */

import React from 'react';
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react';

import * as RestfulShesha from '../utils/fetchers';
export const SPEC_VERSION = 'v1';
export interface AjaxResponseBase {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
}

/**
 * API endpoint DTO
 */
export interface ApiEndpointDto {
  /**
   * Http verb (get/post/put etc)
   */
  httpVerb?: string | null;
  /**
   * Url
   */
  url?: string | null;
}

/**
 * Generic DTO of the simple autocomplete item
 */
export interface AutocompleteItemDto {
  value?: string | null;
  displayText?: string | null;
}

export interface AutocompleteItemDtoListAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: AutocompleteItemDto[] | null;
}

export interface ErrorInfo {
  code?: number;
  message?: string | null;
  details?: string | null;
  validationErrors?: ValidationErrorInfo[] | null;
}

/**
 * Metadata DTO
 */
export interface MetadataDto {
  /**
   * Data type
   */
  dataType?: string | null;
  /**
   * Propeties
   */
  properties?: PropertyMetadataDto[] | null;
  /**
   * Specifications, applicable for entities
   */
  specifications?: SpecificationDto[] | null;
  /**
   * Default API endpoints.
   * key - operation name (create/read/update/delete etc.)
   * value - endpoint DTO (url and http verb)
   */
  apiEndpoints?: {
    [key: string]: ApiEndpointDto;
  } | null;
}

export interface MetadataDtoAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: MetadataDto;
}

/**
 * Indicate the source of the entity/property metadata
 */
export type MetadataSourceType = 1 | 2;

export interface PropertyMetadataDto {
  isVisible?: boolean;
  required?: boolean;
  readonly?: boolean;
  minLength?: number | null;
  maxLength?: number | null;
  min?: number | null;
  max?: number | null;
  /**
   * Equivalent to Audited attribute on the property
   */
  audited?: boolean;
  /**
   * Validation RegularExpression
   */
  regExp?: string | null;
  /**
   * Validation message
   */
  validationMessage?: string | null;
  path?: string | null;
  label?: string | null;
  description?: string | null;
  dataType?: string | null;
  dataFormat?: string | null;
  entityType?: string | null;
  referenceListName?: string | null;
  referenceListModule?: string | null;
  orderIndex?: number;
  groupName?: string | null;
  /**
   * If true, indicates that current property is a framework-related (e.g. Abp.Domain.Entities.ISoftDelete.IsDeleted, Abp.Domain.Entities.Auditing.IHasModificationTime.LastModificationTime)
   */
  isFrameworkRelated?: boolean;
  /**
   * Child properties (applicable for complex objects)
   */
  properties?: PropertyMetadataDto[] | null;
  itemsType?: PropertyMetadataDto;
  source?: MetadataSourceType;
}

export interface PropertyMetadataDtoListAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: PropertyMetadataDto[] | null;
}

/**
 * DTO of the specification that can be applied on top of the entity query
 */
export interface SpecificationDto {
  /**
   * Name. Unique for all specifications in the application
   */
  name?: string | null;
  /**
   * Friendly name
   */
  friendlyName?: string | null;
  /**
   * Description
   */
  description?: string | null;
}

export interface SpecificationDtoListAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: SpecificationDto[] | null;
}

export interface ValidationErrorInfo {
  message?: string | null;
  members?: string[] | null;
}

export interface MetadataTypeAutocompleteQueryParams {
  term?: string;
  selectedValue?: string;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type MetadataTypeAutocompleteProps = Omit<
  GetProps<AutocompleteItemDtoListAjaxResponse, AjaxResponseBase, MetadataTypeAutocompleteQueryParams, void>,
  'path'
>;

export const MetadataTypeAutocomplete = (props: MetadataTypeAutocompleteProps) => (
  <Get<AutocompleteItemDtoListAjaxResponse, AjaxResponseBase, MetadataTypeAutocompleteQueryParams, void>
    path={`/api/services/app/Metadata/TypeAutocomplete`}
    {...props}
  />
);

export type UseMetadataTypeAutocompleteProps = Omit<
  UseGetProps<AutocompleteItemDtoListAjaxResponse, AjaxResponseBase, MetadataTypeAutocompleteQueryParams, void>,
  'path'
>;

export const useMetadataTypeAutocomplete = (props: UseMetadataTypeAutocompleteProps) =>
  useGet<AutocompleteItemDtoListAjaxResponse, AjaxResponseBase, MetadataTypeAutocompleteQueryParams, void>(
    `/api/services/app/Metadata/TypeAutocomplete`,
    props
  );

export type metadataTypeAutocompleteProps = Omit<
  RestfulShesha.GetProps<
    AutocompleteItemDtoListAjaxResponse,
    AjaxResponseBase,
    MetadataTypeAutocompleteQueryParams,
    void
  >,
  'queryParams'
>;
export const metadataTypeAutocomplete = (
  queryParams: MetadataTypeAutocompleteQueryParams,
  props: metadataTypeAutocompleteProps
) =>
  RestfulShesha.get<AutocompleteItemDtoListAjaxResponse, AjaxResponseBase, MetadataTypeAutocompleteQueryParams, void>(
    `/api/services/app/Metadata/TypeAutocomplete`,
    queryParams,
    props
  );

export interface MetadataEntityTypeAutocompleteQueryParams {
  term?: string;
  selectedValue?: string;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type MetadataEntityTypeAutocompleteProps = Omit<
  GetProps<AutocompleteItemDtoListAjaxResponse, AjaxResponseBase, MetadataEntityTypeAutocompleteQueryParams, void>,
  'path'
>;

export const MetadataEntityTypeAutocomplete = (props: MetadataEntityTypeAutocompleteProps) => (
  <Get<AutocompleteItemDtoListAjaxResponse, AjaxResponseBase, MetadataEntityTypeAutocompleteQueryParams, void>
    path={`/api/services/app/Metadata/EntityTypeAutocomplete`}
    {...props}
  />
);

export type UseMetadataEntityTypeAutocompleteProps = Omit<
  UseGetProps<AutocompleteItemDtoListAjaxResponse, AjaxResponseBase, MetadataEntityTypeAutocompleteQueryParams, void>,
  'path'
>;

export const useMetadataEntityTypeAutocomplete = (props: UseMetadataEntityTypeAutocompleteProps) =>
  useGet<AutocompleteItemDtoListAjaxResponse, AjaxResponseBase, MetadataEntityTypeAutocompleteQueryParams, void>(
    `/api/services/app/Metadata/EntityTypeAutocomplete`,
    props
  );

export type metadataEntityTypeAutocompleteProps = Omit<
  RestfulShesha.GetProps<
    AutocompleteItemDtoListAjaxResponse,
    AjaxResponseBase,
    MetadataEntityTypeAutocompleteQueryParams,
    void
  >,
  'queryParams'
>;
export const metadataEntityTypeAutocomplete = (
  queryParams: MetadataEntityTypeAutocompleteQueryParams,
  props: metadataEntityTypeAutocompleteProps
) =>
  RestfulShesha.get<
    AutocompleteItemDtoListAjaxResponse,
    AjaxResponseBase,
    MetadataEntityTypeAutocompleteQueryParams,
    void
  >(`/api/services/app/Metadata/EntityTypeAutocomplete`, queryParams, props);

export interface MetadataPropertyAutocompleteQueryParams {
  term?: string;
  container?: string;
  selectedValue?: string;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type MetadataPropertyAutocompleteProps = Omit<
  GetProps<PropertyMetadataDtoListAjaxResponse, AjaxResponseBase, MetadataPropertyAutocompleteQueryParams, void>,
  'path'
>;

export const MetadataPropertyAutocomplete = (props: MetadataPropertyAutocompleteProps) => (
  <Get<PropertyMetadataDtoListAjaxResponse, AjaxResponseBase, MetadataPropertyAutocompleteQueryParams, void>
    path={`/api/services/app/Metadata/PropertyAutocomplete`}
    {...props}
  />
);

export type UseMetadataPropertyAutocompleteProps = Omit<
  UseGetProps<PropertyMetadataDtoListAjaxResponse, AjaxResponseBase, MetadataPropertyAutocompleteQueryParams, void>,
  'path'
>;

export const useMetadataPropertyAutocomplete = (props: UseMetadataPropertyAutocompleteProps) =>
  useGet<PropertyMetadataDtoListAjaxResponse, AjaxResponseBase, MetadataPropertyAutocompleteQueryParams, void>(
    `/api/services/app/Metadata/PropertyAutocomplete`,
    props
  );

export type metadataPropertyAutocompleteProps = Omit<
  RestfulShesha.GetProps<
    PropertyMetadataDtoListAjaxResponse,
    AjaxResponseBase,
    MetadataPropertyAutocompleteQueryParams,
    void
  >,
  'queryParams'
>;
export const metadataPropertyAutocomplete = (
  queryParams: MetadataPropertyAutocompleteQueryParams,
  props: metadataPropertyAutocompleteProps
) =>
  RestfulShesha.get<
    PropertyMetadataDtoListAjaxResponse,
    AjaxResponseBase,
    MetadataPropertyAutocompleteQueryParams,
    void
  >(`/api/services/app/Metadata/PropertyAutocomplete`, queryParams, props);

export interface MetadataGetPropertiesQueryParams {
  container?: string;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type MetadataGetPropertiesProps = Omit<
  GetProps<PropertyMetadataDtoListAjaxResponse, AjaxResponseBase, MetadataGetPropertiesQueryParams, void>,
  'path'
>;

export const MetadataGetProperties = (props: MetadataGetPropertiesProps) => (
  <Get<PropertyMetadataDtoListAjaxResponse, AjaxResponseBase, MetadataGetPropertiesQueryParams, void>
    path={`/api/services/app/Metadata/GetProperties`}
    {...props}
  />
);

export type UseMetadataGetPropertiesProps = Omit<
  UseGetProps<PropertyMetadataDtoListAjaxResponse, AjaxResponseBase, MetadataGetPropertiesQueryParams, void>,
  'path'
>;

export const useMetadataGetProperties = (props: UseMetadataGetPropertiesProps) =>
  useGet<PropertyMetadataDtoListAjaxResponse, AjaxResponseBase, MetadataGetPropertiesQueryParams, void>(
    `/api/services/app/Metadata/GetProperties`,
    props
  );

export type metadataGetPropertiesProps = Omit<
  RestfulShesha.GetProps<PropertyMetadataDtoListAjaxResponse, AjaxResponseBase, MetadataGetPropertiesQueryParams, void>,
  'queryParams'
>;
export const metadataGetProperties = (
  queryParams: MetadataGetPropertiesQueryParams,
  props: metadataGetPropertiesProps
) =>
  RestfulShesha.get<PropertyMetadataDtoListAjaxResponse, AjaxResponseBase, MetadataGetPropertiesQueryParams, void>(
    `/api/services/app/Metadata/GetProperties`,
    queryParams,
    props
  );

export interface MetadataGetQueryParams {
  container?: string;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type MetadataGetProps = Omit<
  GetProps<MetadataDtoAjaxResponse, AjaxResponseBase, MetadataGetQueryParams, void>,
  'path'
>;

export const MetadataGet = (props: MetadataGetProps) => (
  <Get<MetadataDtoAjaxResponse, AjaxResponseBase, MetadataGetQueryParams, void>
    path={`/api/services/app/Metadata/Get`}
    {...props}
  />
);

export type UseMetadataGetProps = Omit<
  UseGetProps<MetadataDtoAjaxResponse, AjaxResponseBase, MetadataGetQueryParams, void>,
  'path'
>;

export const useMetadataGet = (props: UseMetadataGetProps) =>
  useGet<MetadataDtoAjaxResponse, AjaxResponseBase, MetadataGetQueryParams, void>(
    `/api/services/app/Metadata/Get`,
    props
  );

export type metadataGetProps = Omit<
  RestfulShesha.GetProps<MetadataDtoAjaxResponse, AjaxResponseBase, MetadataGetQueryParams, void>,
  'queryParams'
>;
export const metadataGet = (queryParams: MetadataGetQueryParams, props: metadataGetProps) =>
  RestfulShesha.get<MetadataDtoAjaxResponse, AjaxResponseBase, MetadataGetQueryParams, void>(
    `/api/services/app/Metadata/Get`,
    queryParams,
    props
  );

export interface MetadataSpecificationsQueryParams {
  entityType?: string;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type MetadataSpecificationsProps = Omit<
  MutateProps<SpecificationDtoListAjaxResponse, AjaxResponseBase, MetadataSpecificationsQueryParams, void, void>,
  'path' | 'verb'
>;

/**
 * Get specifications available for the specified entityType
 */
export const MetadataSpecifications = (props: MetadataSpecificationsProps) => (
  <Mutate<SpecificationDtoListAjaxResponse, AjaxResponseBase, MetadataSpecificationsQueryParams, void, void>
    verb="POST"
    path={`/api/services/app/Metadata/Specifications`}
    {...props}
  />
);

export type UseMetadataSpecificationsProps = Omit<
  UseMutateProps<SpecificationDtoListAjaxResponse, AjaxResponseBase, MetadataSpecificationsQueryParams, void, void>,
  'path' | 'verb'
>;

/**
 * Get specifications available for the specified entityType
 */
export const useMetadataSpecifications = (props: UseMetadataSpecificationsProps) =>
  useMutate<SpecificationDtoListAjaxResponse, AjaxResponseBase, MetadataSpecificationsQueryParams, void, void>(
    'POST',
    `/api/services/app/Metadata/Specifications`,
    props
  );

export type metadataSpecificationsProps = Omit<
  RestfulShesha.MutateProps<
    SpecificationDtoListAjaxResponse,
    AjaxResponseBase,
    MetadataSpecificationsQueryParams,
    void,
    void
  >,
  'data'
>;
/**
 * Get specifications available for the specified entityType
 */
export const metadataSpecifications = (props: metadataSpecificationsProps) =>
  RestfulShesha.mutate<
    SpecificationDtoListAjaxResponse,
    AjaxResponseBase,
    MetadataSpecificationsQueryParams,
    void,
    void
  >('POST', `/api/services/app/Metadata/Specifications`, undefined, props);
